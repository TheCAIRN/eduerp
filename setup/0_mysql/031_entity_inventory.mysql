/*
 * Create tables for managing inventory
 */

-- Sometimes inventory needs to be segregated based on packaging
CREATE TABLE IF NOT EXISTS item_variant_codes (
	variant_code char(7) not null PRIMARY KEY
	,variant_description varchar(256) not null
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS item_variants (
	entity_id int unsigned not null
	,product_id int not null
	,variant_code char(7) not null
	,created_by int unsigned not null
	,creation_date datetime not null
	,last_update_by int unsigned not null
	,last_update_date datetime not null
	,FOREIGN KEY (entity_id) REFERENCES ent_entities (entity_id)
	,FOREIGN KEY (product_id) REFERENCES item_master (product_id)
	,FOREIGN KEY (variant_code) REFERENCES item_variant_codes (variant_code)
	,FOREIGN KEY (created_by) REFERENCES sec_users (user_id)
	,FOREIGN KEY (last_update_by) REFERENCES sec_users (user_id)		
	,UNIQUE (entity_id,product_id,variant_code)
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS inv_master (
	inventory_id int not null auto_increment PRIMARY KEY
	,entity_id int unsigned not null
	,product_id int not null
	,variant_code char(7)
	,total_on_hand decimal(24,5)
	,total_in_wip decimal(24,5)
	,total_on_order decimal(24,5)
	,total_reserved decimal(24,5)
	,total_unshipped_sold decimal(24,5)
	,total_shipped_sold decimal(24,5)
	,created_by int unsigned not null
	,creation_date datetime not null
	,last_update_by int unsigned not null
	,last_update_date datetime not null
	,FOREIGN KEY (entity_id) REFERENCES ent_entities (entity_id)
	,FOREIGN KEY (product_id) REFERENCES item_master (product_id)
	,FOREIGN KEY (variant_code) REFERENCES item_variant_codes (variant_code)
	,FOREIGN KEY (created_by) REFERENCES sec_users (user_id)
	,FOREIGN KEY (last_update_by) REFERENCES sec_users (user_id)		
	,UNIQUE (entity_id,product_id,variant_code)
) ENGINE=InnoDB;

-- Transaction Type may be one of C=Item change (multiple items), M=Item move between entities, 
-- P=Physical Count (on_hand_delta is actual quantity counted),
-- Q=Quantity adjustment (single item; inv id 1 and 2 will be the same)
CREATE TABLE IF NOT EXISTS inv_transactions (
	inv_transaction_id int not null auto_increment PRIMARY KEY
	,inv_transaction_type char(1) not null
	,reference_note varchar(512)
	,reference_table varchar(128)
	,reference_key_int int
	,reference_key_char varchar(20)
	,inventory_id_1 int not null
	,inventory_id_2 int not null
	,quantity_on_hand_delta_1 decimal(24,5)
	,quantity_on_hand_delta_2 decimal(24,5)
	,quantity_in_wip_delta_1 decimal(24,5)
	,quantity_in_wip_delta_2 decimal(24,5)
	,quantity_on_order_delta_1 decimal(24,5)
	,quantity_on_order_delta_2 decimal(24,5)
	,quantity_reserved_delta_1 decimal(24,5)
	,quantity_reserved_delta_2 decimal(24,5)
	,quantity_unshipped_delta_1 decimal(24,5)
	,quantity_unshipped_delta_2 decimal(24,5)
	,quantity_shipped_delta_1 decimal(24,5)
	,quantity_shipped_delta_2 decimal(24,5)
	,created_by int unsigned not null
	,creation_date datetime not null
	,last_update_by int unsigned not null
	,last_update_date datetime not null
	,FOREIGN KEY (inventory_id_1) REFERENCES inv_master(inventory_id)
	,FOREIGN KEY (inventory_id_2) REFERENCES inv_master(inventory_id)
	,FOREIGN KEY (created_by) REFERENCES sec_users (user_id)
	,FOREIGN KEY (last_update_by) REFERENCES sec_users (user_id)			
) ENGINE=InnoDB;

